---
import Ramen from './icons/Ramen.astro'
import Bed from './icons/Bed.astro'
import Laptop from './icons/Laptop.astro'
import Design from './icons/Design.astro'
import Repeat from './icons/Repeat.astro'

const KEYS = [
  { key: 'KeyE', icon: Ramen, tooltip: 'Eat' },
  { key: 'KeyS', icon: Bed, tooltip: 'Sleep' },
  { key: 'KeyD', icon: Design, tooltip: 'Design' },
  { key: 'KeyC', icon: Laptop, tooltip: 'Code' },
  { key: 'KeyR', icon: Repeat, tooltip: 'Repeat' }
]
---

<!-- keyboard source: https://codepen.io/HaydnComley/pen/yLdpLbJ -->
<script>
  const keyboardKeys = Array.from(document.querySelectorAll('button'))
  const keyboardSound = document.querySelector('audio')

  document.addEventListener('keydown', (e) => {
    e.preventDefault()
    const key = keyboardKeys.find((key) => key.dataset.key === e.code)

    if (key && !key.classList.contains('isDown')) {
      key.classList.toggle('isDown', true)
      if (!keyboardSound) return

      const newAudio = keyboardSound.cloneNode() as HTMLAudioElement
      keyboardSound.after(newAudio)
      newAudio.play()
      setTimeout(() => newAudio.remove(), 500)
    }
  })

  document.addEventListener('keyup', (e) => {
    e.preventDefault()
    const key = keyboardKeys.find((key) => key.dataset.key === e.code)
    if (key) {
      key.classList.toggle('isDown', false)
    }
  })

  keyboardKeys.forEach((key) =>
    key.addEventListener('mousedown', (e) => {
      e.preventDefault()
      if (!keyboardSound) return

      const newAudio = keyboardSound.cloneNode() as HTMLAudioElement
      keyboardSound.after(newAudio)
      newAudio.play()
      setTimeout(() => newAudio.remove(), 500)
    })
  )
</script>

<div class='max-xs:flex-col flex'>
  <div class='board'>
    {
      KEYS.map(({ key, icon: Icon, tooltip }) => (
        <div data-tooltip={tooltip}>
          <div class='key-position'>
            <button class='key' data-key={key}>
              <Icon size={40} />
            </button>
          </div>
        </div>
      ))
    }
  </div>
  <div data-tooltip='Check out this keyboard source code'>
    <div class='key-position flex items-center justify-center'>
      <button class='key call-to-action'> Credit </button>
    </div>
  </div>
</div>
<audio src='https://cdn.yoavik.com/codepen/mechanical-keyboard/keytype.mp3'
></audio>

<style>
  :root {
    --background-2: #000;
    --background-3: #282828;
    --contrast: #fff;
    --size: 5rem; /* keycap size */
  }

  @media (max-width: 640px) {
    :root {
      --size: 3rem;
    }
  }

  /* adjust value inside rotateY to adjust the direction of each keycap */
  .board {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--size) * 0.02);
  }

  .key.call-to-action {
    /* filter: drop-shadow(0 0 48px #e35b0c); */
    filter: drop-shadow(0 0 48px #d8b486c7);
    width: 120px;
    font-size: 14px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      'Liberation Mono', 'Courier New', monospace;
  }

  .key-position {
    transform: rotateZ(0turn) rotateY(0.05turn) rotateX(-0.1turn);
  }

  .key {
    position: relative;
    width: var(--size);
    height: var(--size);
    font-size: calc(var(--size) / 2);
    border: 0.1rem solid var(--background-3);
    border-radius: calc(var(--size) * 0.2);
    background: var(--background-2);
    color: var(--contrast);
    box-shadow:
      0.15rem 0.15rem 0 0 var(--background-3),
      0.3rem 0.3rem 0 0 var(--background-3),
      0.45rem 0.45rem 0 0 var(--background-3),
      0.6rem 0.6rem 0 0 var(--background-3);
    transition: 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .key:hover {
    cursor: pointer;
    transform: translateX(0.2rem) translateY(0.2rem);
    box-shadow:
      0.15rem 0.15rem 0 0 var(--background-3),
      0.3rem 0.3rem 0 0 var(--background-3),
      0.45rem 0.45rem 0 0 var(--background-3),
      0.5rem 0.5rem 0 0 var(--background-3);
  }
  .key:active,
  .key.isDown {
    cursor: grabbing;
    transform: translateX(0.8rem) translateY(0.8rem);
    box-shadow:
      0.1rem 0.1rem 0 0 var(--background-3),
      0.1rem 0.1rem 0 0 var(--background-3),
      0.2rem 0.2rem 0 0 var(--background-3),
      0.2rem 0.2rem 0 0 var(--background-3);
    filter: blur(0.02rem);
  }

  /* tooltip source: https://codepen.io/cbracco/pen/nXEQLw */
  /* Add this attribute to the element that needs a tooltip */
  [data-tooltip] {
    position: relative;
    z-index: 2;
    cursor: pointer;
  }

  /* Hide the tooltip content by default */
  [data-tooltip]:before,
  [data-tooltip]:after {
    visibility: hidden;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=0)';
    filter: progid: DXImageTransform.Microsoft.Alpha(Opacity=0);
    opacity: 0;
    pointer-events: none;
  }

  /* Position tooltip above the element */
  [data-tooltip]:before {
    position: absolute;
    bottom: 100%;
    transform: translateX(-50%);
    margin-bottom: 5px;
    padding: 6px 12px;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    background-color: #000;
    background-color: hsla(0, 0%, 20%, 0.9);
    color: #fff;
    content: attr(data-tooltip);
    text-align: center;
    font-size: 14px;
    line-height: 1.2;
    white-space: nowrap;
    z-index: 2;
  }

  /* Triangle hack to make tooltip look like a speech bubble */
  [data-tooltip]:after {
    position: absolute;
    bottom: 100%;
    left: 50%;
    margin-left: -5px;
    width: 0;
    border-top: 5px solid #000;
    border-top: 5px solid hsla(0, 0%, 20%, 0.9);
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    content: ' ';
    font-size: 0;
    line-height: 0;
  }

  /* Show tooltip content on hover */
  [data-tooltip]:hover:before,
  [data-tooltip]:hover:after {
    visibility: visible;
    -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';
    filter: progid: DXImageTransform.Microsoft.Alpha(Opacity=100);
    opacity: 1;
  }
</style>
